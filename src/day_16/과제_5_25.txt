예제를 실행해 보세요!.

public class Test01 {
	public static void main(String[] args) throws Exception {
		Exercise th1 = new Exercise();
		th1.start();
		String input = JOptionPane.showInputDialog("아무 값이나 입력하세요.");
		System.out.println("입력하신 값은 " + input + "입니다.");
		th1.interrupt(); // 쓰레드에게 작업을 멈추라고 요청한다.
	}
}

class Exercise extends Thread {
	public void run() {
		int i = 30;
		while (i != 0 && !isInterrupted()) {
			System.out.println(i--);
			try {
				Thread.sleep(1000); // 1초 지연
			} catch (InterruptedException e) {
				interrupt();
			}
		}
		System.out.println("카운트가 종료되었습니다.");
	} // main
}








문제 1. 쓰레드를 구현하는 방법에는 Thread클래스로부터 상속받는 것과 
Runnable인터페이스를 구현하는 것 두 가지가 있는데, 
다음의 코드는 Thread클래스를 상속받아서 쓰레드 를 구현한 것이다. 
이 코드를 Runnable인터페이스를 구현하도록 변경하시오.



class Prob1 {
	public static void main(String args[]) {
		Thread1 th1 = new Thread1();
		th1.start();
	}
}


class Thread1 extends Thread {
	public void run() {
		for(int i=0; i < 300; i++) {
			System.out.print('-');
		}
	}
}










=====================   문제 2.  제출 문제  =======================

문제 2. 다음의 메서드 매개변수로 전달되는 
        첫번째 문자열을 두번째 문자열의 구분자로 잘라내어 
	배열에 저장한 후 리턴하는 메서드를 구현하시오. 
단, String 클래스의 split() 메서드와 StringTokenizer를 사용해서는 안된다. 그리고 제공된 메인 메서드는 변경하지 않는다



public class Prob2 {
	public static void main(String[] args) {
		String str = "PROD-001#X-note#Samsung#3#6000000";
		String[] strs = stringSplit(str, "#");
		System.out.println("=== 문자열 처리 결과 ===");
		for (int i = 0; i < strs.length; i++) {
			System.out.println(strs[i]);
		}
	}

	private static String[] stringSplit(String str1, String str2) {
		// 구현하시오.
	}	
}


<<처리 결과>>

=== 문자열 처리 결과 ===
PROD-001
X-note
Samsung
3
600000



